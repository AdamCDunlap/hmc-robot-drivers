"""autogenerated by genpy from neato_mudd/NeatoSensors_All.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class NeatoSensors_All(genpy.Message):
  _md5sum = "9de914b8bd7742a955f23023c12cdc5f"
  _type = "neato_mudd/NeatoSensors_All"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int16 WallSensorInMM
int16 BatteryVoltageInmV
int16 LeftDropInMM
int16 RightDropInMM
int8 RightMagSensor
int8 LeftMagSensor
int8 XTemp0InC
int8 XTemp1InC
int16 VacuumCurrentInmA
int16 ChargeVoltInmV
int8 BatteryTemp1InC
int16 CurrentInmA
int8 BatteryTemp0InC
bool SNSR_DC_JACK_CONNECT
bool SNSR_DUSTBIN_IS_IN
bool SNSR_LEFT_WHEEL_EXTENDED
bool SNSR_RIGHT_WHEEL_EXTENDED
bool LSIDEBIT
bool LFRONTBIT
bool RSIDEBIT
bool RFRONTBIT
bool BTN_SOFT_KEY
bool BTN_SCROLL_UP
bool BTN_SCROLL_DOWN
bool BTN_START
bool BTN_BACK
int32 Brush_MaxPWM
int32 Brush_PWM
int16 Brush_mVolts
int32 Brush_Encoder
int16 Brush_RPM
int32 Vaccuum_MaxPWM
int32 Vaccuum_PWM
int16 Vaccuum_CurrentInMA
int32 Vaccuum_Encoder
int16 Vaccuum_RPM
int32 LeftWheel_MaxPWM
int32 LeftWheel_PWM
int16 LeftWheel_mVolts
int32 LeftWheel_Encoder
int32 LeftWheel_PositionInMM
int16 LeftWheel_RPM
int32 RightWheel_MaxPWM
int32 RightWheel_PWM
int16 RightWheel_mVolts
int32 RightWheel_Encoder
int32 RightWheel_PositionInMM
int16 RightWheel_RPM
int32 Laser_MaxPWM
int32 Laser_PWM
int16 Laser_mVolts
int32 Laser_Encoder
int16 Laser_RPM
int16 Charger_MaxPWM
int16 Charger_PWM
int16 Charger_mAH
int8 FuelPercent
int8 BatteryOverTemp
bool ChargingActive
bool ChargingEnabled
bool ConfidentOnFuel
bool OnReservedFuel
bool EmptyFuel
bool BatteryFailure
bool ExtPwrPresent
int8 VBattV
int8 VExtV
int32 MaxPWM

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','WallSensorInMM','BatteryVoltageInmV','LeftDropInMM','RightDropInMM','RightMagSensor','LeftMagSensor','XTemp0InC','XTemp1InC','VacuumCurrentInmA','ChargeVoltInmV','BatteryTemp1InC','CurrentInmA','BatteryTemp0InC','SNSR_DC_JACK_CONNECT','SNSR_DUSTBIN_IS_IN','SNSR_LEFT_WHEEL_EXTENDED','SNSR_RIGHT_WHEEL_EXTENDED','LSIDEBIT','LFRONTBIT','RSIDEBIT','RFRONTBIT','BTN_SOFT_KEY','BTN_SCROLL_UP','BTN_SCROLL_DOWN','BTN_START','BTN_BACK','Brush_MaxPWM','Brush_PWM','Brush_mVolts','Brush_Encoder','Brush_RPM','Vaccuum_MaxPWM','Vaccuum_PWM','Vaccuum_CurrentInMA','Vaccuum_Encoder','Vaccuum_RPM','LeftWheel_MaxPWM','LeftWheel_PWM','LeftWheel_mVolts','LeftWheel_Encoder','LeftWheel_PositionInMM','LeftWheel_RPM','RightWheel_MaxPWM','RightWheel_PWM','RightWheel_mVolts','RightWheel_Encoder','RightWheel_PositionInMM','RightWheel_RPM','Laser_MaxPWM','Laser_PWM','Laser_mVolts','Laser_Encoder','Laser_RPM','Charger_MaxPWM','Charger_PWM','Charger_mAH','FuelPercent','BatteryOverTemp','ChargingActive','ChargingEnabled','ConfidentOnFuel','OnReservedFuel','EmptyFuel','BatteryFailure','ExtPwrPresent','VBattV','VExtV','MaxPWM']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int8','int8','int8','int8','int16','int16','int8','int16','int8','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int32','int32','int16','int32','int16','int32','int32','int16','int32','int16','int32','int32','int16','int32','int32','int16','int32','int32','int16','int32','int32','int16','int32','int32','int16','int32','int16','int16','int16','int16','int8','int8','bool','bool','bool','bool','bool','bool','bool','int8','int8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,WallSensorInMM,BatteryVoltageInmV,LeftDropInMM,RightDropInMM,RightMagSensor,LeftMagSensor,XTemp0InC,XTemp1InC,VacuumCurrentInmA,ChargeVoltInmV,BatteryTemp1InC,CurrentInmA,BatteryTemp0InC,SNSR_DC_JACK_CONNECT,SNSR_DUSTBIN_IS_IN,SNSR_LEFT_WHEEL_EXTENDED,SNSR_RIGHT_WHEEL_EXTENDED,LSIDEBIT,LFRONTBIT,RSIDEBIT,RFRONTBIT,BTN_SOFT_KEY,BTN_SCROLL_UP,BTN_SCROLL_DOWN,BTN_START,BTN_BACK,Brush_MaxPWM,Brush_PWM,Brush_mVolts,Brush_Encoder,Brush_RPM,Vaccuum_MaxPWM,Vaccuum_PWM,Vaccuum_CurrentInMA,Vaccuum_Encoder,Vaccuum_RPM,LeftWheel_MaxPWM,LeftWheel_PWM,LeftWheel_mVolts,LeftWheel_Encoder,LeftWheel_PositionInMM,LeftWheel_RPM,RightWheel_MaxPWM,RightWheel_PWM,RightWheel_mVolts,RightWheel_Encoder,RightWheel_PositionInMM,RightWheel_RPM,Laser_MaxPWM,Laser_PWM,Laser_mVolts,Laser_Encoder,Laser_RPM,Charger_MaxPWM,Charger_PWM,Charger_mAH,FuelPercent,BatteryOverTemp,ChargingActive,ChargingEnabled,ConfidentOnFuel,OnReservedFuel,EmptyFuel,BatteryFailure,ExtPwrPresent,VBattV,VExtV,MaxPWM

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NeatoSensors_All, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.WallSensorInMM is None:
        self.WallSensorInMM = 0
      if self.BatteryVoltageInmV is None:
        self.BatteryVoltageInmV = 0
      if self.LeftDropInMM is None:
        self.LeftDropInMM = 0
      if self.RightDropInMM is None:
        self.RightDropInMM = 0
      if self.RightMagSensor is None:
        self.RightMagSensor = 0
      if self.LeftMagSensor is None:
        self.LeftMagSensor = 0
      if self.XTemp0InC is None:
        self.XTemp0InC = 0
      if self.XTemp1InC is None:
        self.XTemp1InC = 0
      if self.VacuumCurrentInmA is None:
        self.VacuumCurrentInmA = 0
      if self.ChargeVoltInmV is None:
        self.ChargeVoltInmV = 0
      if self.BatteryTemp1InC is None:
        self.BatteryTemp1InC = 0
      if self.CurrentInmA is None:
        self.CurrentInmA = 0
      if self.BatteryTemp0InC is None:
        self.BatteryTemp0InC = 0
      if self.SNSR_DC_JACK_CONNECT is None:
        self.SNSR_DC_JACK_CONNECT = False
      if self.SNSR_DUSTBIN_IS_IN is None:
        self.SNSR_DUSTBIN_IS_IN = False
      if self.SNSR_LEFT_WHEEL_EXTENDED is None:
        self.SNSR_LEFT_WHEEL_EXTENDED = False
      if self.SNSR_RIGHT_WHEEL_EXTENDED is None:
        self.SNSR_RIGHT_WHEEL_EXTENDED = False
      if self.LSIDEBIT is None:
        self.LSIDEBIT = False
      if self.LFRONTBIT is None:
        self.LFRONTBIT = False
      if self.RSIDEBIT is None:
        self.RSIDEBIT = False
      if self.RFRONTBIT is None:
        self.RFRONTBIT = False
      if self.BTN_SOFT_KEY is None:
        self.BTN_SOFT_KEY = False
      if self.BTN_SCROLL_UP is None:
        self.BTN_SCROLL_UP = False
      if self.BTN_SCROLL_DOWN is None:
        self.BTN_SCROLL_DOWN = False
      if self.BTN_START is None:
        self.BTN_START = False
      if self.BTN_BACK is None:
        self.BTN_BACK = False
      if self.Brush_MaxPWM is None:
        self.Brush_MaxPWM = 0
      if self.Brush_PWM is None:
        self.Brush_PWM = 0
      if self.Brush_mVolts is None:
        self.Brush_mVolts = 0
      if self.Brush_Encoder is None:
        self.Brush_Encoder = 0
      if self.Brush_RPM is None:
        self.Brush_RPM = 0
      if self.Vaccuum_MaxPWM is None:
        self.Vaccuum_MaxPWM = 0
      if self.Vaccuum_PWM is None:
        self.Vaccuum_PWM = 0
      if self.Vaccuum_CurrentInMA is None:
        self.Vaccuum_CurrentInMA = 0
      if self.Vaccuum_Encoder is None:
        self.Vaccuum_Encoder = 0
      if self.Vaccuum_RPM is None:
        self.Vaccuum_RPM = 0
      if self.LeftWheel_MaxPWM is None:
        self.LeftWheel_MaxPWM = 0
      if self.LeftWheel_PWM is None:
        self.LeftWheel_PWM = 0
      if self.LeftWheel_mVolts is None:
        self.LeftWheel_mVolts = 0
      if self.LeftWheel_Encoder is None:
        self.LeftWheel_Encoder = 0
      if self.LeftWheel_PositionInMM is None:
        self.LeftWheel_PositionInMM = 0
      if self.LeftWheel_RPM is None:
        self.LeftWheel_RPM = 0
      if self.RightWheel_MaxPWM is None:
        self.RightWheel_MaxPWM = 0
      if self.RightWheel_PWM is None:
        self.RightWheel_PWM = 0
      if self.RightWheel_mVolts is None:
        self.RightWheel_mVolts = 0
      if self.RightWheel_Encoder is None:
        self.RightWheel_Encoder = 0
      if self.RightWheel_PositionInMM is None:
        self.RightWheel_PositionInMM = 0
      if self.RightWheel_RPM is None:
        self.RightWheel_RPM = 0
      if self.Laser_MaxPWM is None:
        self.Laser_MaxPWM = 0
      if self.Laser_PWM is None:
        self.Laser_PWM = 0
      if self.Laser_mVolts is None:
        self.Laser_mVolts = 0
      if self.Laser_Encoder is None:
        self.Laser_Encoder = 0
      if self.Laser_RPM is None:
        self.Laser_RPM = 0
      if self.Charger_MaxPWM is None:
        self.Charger_MaxPWM = 0
      if self.Charger_PWM is None:
        self.Charger_PWM = 0
      if self.Charger_mAH is None:
        self.Charger_mAH = 0
      if self.FuelPercent is None:
        self.FuelPercent = 0
      if self.BatteryOverTemp is None:
        self.BatteryOverTemp = 0
      if self.ChargingActive is None:
        self.ChargingActive = False
      if self.ChargingEnabled is None:
        self.ChargingEnabled = False
      if self.ConfidentOnFuel is None:
        self.ConfidentOnFuel = False
      if self.OnReservedFuel is None:
        self.OnReservedFuel = False
      if self.EmptyFuel is None:
        self.EmptyFuel = False
      if self.BatteryFailure is None:
        self.BatteryFailure = False
      if self.ExtPwrPresent is None:
        self.ExtPwrPresent = False
      if self.VBattV is None:
        self.VBattV = 0
      if self.VExtV is None:
        self.VExtV = 0
      if self.MaxPWM is None:
        self.MaxPWM = 0
    else:
      self.header = std_msgs.msg.Header()
      self.WallSensorInMM = 0
      self.BatteryVoltageInmV = 0
      self.LeftDropInMM = 0
      self.RightDropInMM = 0
      self.RightMagSensor = 0
      self.LeftMagSensor = 0
      self.XTemp0InC = 0
      self.XTemp1InC = 0
      self.VacuumCurrentInmA = 0
      self.ChargeVoltInmV = 0
      self.BatteryTemp1InC = 0
      self.CurrentInmA = 0
      self.BatteryTemp0InC = 0
      self.SNSR_DC_JACK_CONNECT = False
      self.SNSR_DUSTBIN_IS_IN = False
      self.SNSR_LEFT_WHEEL_EXTENDED = False
      self.SNSR_RIGHT_WHEEL_EXTENDED = False
      self.LSIDEBIT = False
      self.LFRONTBIT = False
      self.RSIDEBIT = False
      self.RFRONTBIT = False
      self.BTN_SOFT_KEY = False
      self.BTN_SCROLL_UP = False
      self.BTN_SCROLL_DOWN = False
      self.BTN_START = False
      self.BTN_BACK = False
      self.Brush_MaxPWM = 0
      self.Brush_PWM = 0
      self.Brush_mVolts = 0
      self.Brush_Encoder = 0
      self.Brush_RPM = 0
      self.Vaccuum_MaxPWM = 0
      self.Vaccuum_PWM = 0
      self.Vaccuum_CurrentInMA = 0
      self.Vaccuum_Encoder = 0
      self.Vaccuum_RPM = 0
      self.LeftWheel_MaxPWM = 0
      self.LeftWheel_PWM = 0
      self.LeftWheel_mVolts = 0
      self.LeftWheel_Encoder = 0
      self.LeftWheel_PositionInMM = 0
      self.LeftWheel_RPM = 0
      self.RightWheel_MaxPWM = 0
      self.RightWheel_PWM = 0
      self.RightWheel_mVolts = 0
      self.RightWheel_Encoder = 0
      self.RightWheel_PositionInMM = 0
      self.RightWheel_RPM = 0
      self.Laser_MaxPWM = 0
      self.Laser_PWM = 0
      self.Laser_mVolts = 0
      self.Laser_Encoder = 0
      self.Laser_RPM = 0
      self.Charger_MaxPWM = 0
      self.Charger_PWM = 0
      self.Charger_mAH = 0
      self.FuelPercent = 0
      self.BatteryOverTemp = 0
      self.ChargingActive = False
      self.ChargingEnabled = False
      self.ConfidentOnFuel = False
      self.OnReservedFuel = False
      self.EmptyFuel = False
      self.BatteryFailure = False
      self.ExtPwrPresent = False
      self.VBattV = 0
      self.VExtV = 0
      self.MaxPWM = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi.pack(_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.RightMagSensor, _x.LeftMagSensor, _x.XTemp0InC, _x.XTemp1InC, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp1InC, _x.CurrentInmA, _x.BatteryTemp0InC, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT, _x.BTN_SOFT_KEY, _x.BTN_SCROLL_UP, _x.BTN_SCROLL_DOWN, _x.BTN_START, _x.BTN_BACK, _x.Brush_MaxPWM, _x.Brush_PWM, _x.Brush_mVolts, _x.Brush_Encoder, _x.Brush_RPM, _x.Vaccuum_MaxPWM, _x.Vaccuum_PWM, _x.Vaccuum_CurrentInMA, _x.Vaccuum_Encoder, _x.Vaccuum_RPM, _x.LeftWheel_MaxPWM, _x.LeftWheel_PWM, _x.LeftWheel_mVolts, _x.LeftWheel_Encoder, _x.LeftWheel_PositionInMM, _x.LeftWheel_RPM, _x.RightWheel_MaxPWM, _x.RightWheel_PWM, _x.RightWheel_mVolts, _x.RightWheel_Encoder, _x.RightWheel_PositionInMM, _x.RightWheel_RPM, _x.Laser_MaxPWM, _x.Laser_PWM, _x.Laser_mVolts, _x.Laser_Encoder, _x.Laser_RPM, _x.Charger_MaxPWM, _x.Charger_PWM, _x.Charger_mAH, _x.FuelPercent, _x.BatteryOverTemp, _x.ChargingActive, _x.ChargingEnabled, _x.ConfidentOnFuel, _x.OnReservedFuel, _x.EmptyFuel, _x.BatteryFailure, _x.ExtPwrPresent, _x.VBattV, _x.VExtV, _x.MaxPWM))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 142
      (_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.RightMagSensor, _x.LeftMagSensor, _x.XTemp0InC, _x.XTemp1InC, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp1InC, _x.CurrentInmA, _x.BatteryTemp0InC, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT, _x.BTN_SOFT_KEY, _x.BTN_SCROLL_UP, _x.BTN_SCROLL_DOWN, _x.BTN_START, _x.BTN_BACK, _x.Brush_MaxPWM, _x.Brush_PWM, _x.Brush_mVolts, _x.Brush_Encoder, _x.Brush_RPM, _x.Vaccuum_MaxPWM, _x.Vaccuum_PWM, _x.Vaccuum_CurrentInMA, _x.Vaccuum_Encoder, _x.Vaccuum_RPM, _x.LeftWheel_MaxPWM, _x.LeftWheel_PWM, _x.LeftWheel_mVolts, _x.LeftWheel_Encoder, _x.LeftWheel_PositionInMM, _x.LeftWheel_RPM, _x.RightWheel_MaxPWM, _x.RightWheel_PWM, _x.RightWheel_mVolts, _x.RightWheel_Encoder, _x.RightWheel_PositionInMM, _x.RightWheel_RPM, _x.Laser_MaxPWM, _x.Laser_PWM, _x.Laser_mVolts, _x.Laser_Encoder, _x.Laser_RPM, _x.Charger_MaxPWM, _x.Charger_PWM, _x.Charger_mAH, _x.FuelPercent, _x.BatteryOverTemp, _x.ChargingActive, _x.ChargingEnabled, _x.ConfidentOnFuel, _x.OnReservedFuel, _x.EmptyFuel, _x.BatteryFailure, _x.ExtPwrPresent, _x.VBattV, _x.VExtV, _x.MaxPWM,) = _struct_4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi.unpack(str[start:end])
      self.SNSR_DC_JACK_CONNECT = bool(self.SNSR_DC_JACK_CONNECT)
      self.SNSR_DUSTBIN_IS_IN = bool(self.SNSR_DUSTBIN_IS_IN)
      self.SNSR_LEFT_WHEEL_EXTENDED = bool(self.SNSR_LEFT_WHEEL_EXTENDED)
      self.SNSR_RIGHT_WHEEL_EXTENDED = bool(self.SNSR_RIGHT_WHEEL_EXTENDED)
      self.LSIDEBIT = bool(self.LSIDEBIT)
      self.LFRONTBIT = bool(self.LFRONTBIT)
      self.RSIDEBIT = bool(self.RSIDEBIT)
      self.RFRONTBIT = bool(self.RFRONTBIT)
      self.BTN_SOFT_KEY = bool(self.BTN_SOFT_KEY)
      self.BTN_SCROLL_UP = bool(self.BTN_SCROLL_UP)
      self.BTN_SCROLL_DOWN = bool(self.BTN_SCROLL_DOWN)
      self.BTN_START = bool(self.BTN_START)
      self.BTN_BACK = bool(self.BTN_BACK)
      self.ChargingActive = bool(self.ChargingActive)
      self.ChargingEnabled = bool(self.ChargingEnabled)
      self.ConfidentOnFuel = bool(self.ConfidentOnFuel)
      self.OnReservedFuel = bool(self.OnReservedFuel)
      self.EmptyFuel = bool(self.EmptyFuel)
      self.BatteryFailure = bool(self.BatteryFailure)
      self.ExtPwrPresent = bool(self.ExtPwrPresent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi.pack(_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.RightMagSensor, _x.LeftMagSensor, _x.XTemp0InC, _x.XTemp1InC, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp1InC, _x.CurrentInmA, _x.BatteryTemp0InC, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT, _x.BTN_SOFT_KEY, _x.BTN_SCROLL_UP, _x.BTN_SCROLL_DOWN, _x.BTN_START, _x.BTN_BACK, _x.Brush_MaxPWM, _x.Brush_PWM, _x.Brush_mVolts, _x.Brush_Encoder, _x.Brush_RPM, _x.Vaccuum_MaxPWM, _x.Vaccuum_PWM, _x.Vaccuum_CurrentInMA, _x.Vaccuum_Encoder, _x.Vaccuum_RPM, _x.LeftWheel_MaxPWM, _x.LeftWheel_PWM, _x.LeftWheel_mVolts, _x.LeftWheel_Encoder, _x.LeftWheel_PositionInMM, _x.LeftWheel_RPM, _x.RightWheel_MaxPWM, _x.RightWheel_PWM, _x.RightWheel_mVolts, _x.RightWheel_Encoder, _x.RightWheel_PositionInMM, _x.RightWheel_RPM, _x.Laser_MaxPWM, _x.Laser_PWM, _x.Laser_mVolts, _x.Laser_Encoder, _x.Laser_RPM, _x.Charger_MaxPWM, _x.Charger_PWM, _x.Charger_mAH, _x.FuelPercent, _x.BatteryOverTemp, _x.ChargingActive, _x.ChargingEnabled, _x.ConfidentOnFuel, _x.OnReservedFuel, _x.EmptyFuel, _x.BatteryFailure, _x.ExtPwrPresent, _x.VBattV, _x.VExtV, _x.MaxPWM))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 142
      (_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.RightMagSensor, _x.LeftMagSensor, _x.XTemp0InC, _x.XTemp1InC, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp1InC, _x.CurrentInmA, _x.BatteryTemp0InC, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT, _x.BTN_SOFT_KEY, _x.BTN_SCROLL_UP, _x.BTN_SCROLL_DOWN, _x.BTN_START, _x.BTN_BACK, _x.Brush_MaxPWM, _x.Brush_PWM, _x.Brush_mVolts, _x.Brush_Encoder, _x.Brush_RPM, _x.Vaccuum_MaxPWM, _x.Vaccuum_PWM, _x.Vaccuum_CurrentInMA, _x.Vaccuum_Encoder, _x.Vaccuum_RPM, _x.LeftWheel_MaxPWM, _x.LeftWheel_PWM, _x.LeftWheel_mVolts, _x.LeftWheel_Encoder, _x.LeftWheel_PositionInMM, _x.LeftWheel_RPM, _x.RightWheel_MaxPWM, _x.RightWheel_PWM, _x.RightWheel_mVolts, _x.RightWheel_Encoder, _x.RightWheel_PositionInMM, _x.RightWheel_RPM, _x.Laser_MaxPWM, _x.Laser_PWM, _x.Laser_mVolts, _x.Laser_Encoder, _x.Laser_RPM, _x.Charger_MaxPWM, _x.Charger_PWM, _x.Charger_mAH, _x.FuelPercent, _x.BatteryOverTemp, _x.ChargingActive, _x.ChargingEnabled, _x.ConfidentOnFuel, _x.OnReservedFuel, _x.EmptyFuel, _x.BatteryFailure, _x.ExtPwrPresent, _x.VBattV, _x.VExtV, _x.MaxPWM,) = _struct_4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi.unpack(str[start:end])
      self.SNSR_DC_JACK_CONNECT = bool(self.SNSR_DC_JACK_CONNECT)
      self.SNSR_DUSTBIN_IS_IN = bool(self.SNSR_DUSTBIN_IS_IN)
      self.SNSR_LEFT_WHEEL_EXTENDED = bool(self.SNSR_LEFT_WHEEL_EXTENDED)
      self.SNSR_RIGHT_WHEEL_EXTENDED = bool(self.SNSR_RIGHT_WHEEL_EXTENDED)
      self.LSIDEBIT = bool(self.LSIDEBIT)
      self.LFRONTBIT = bool(self.LFRONTBIT)
      self.RSIDEBIT = bool(self.RSIDEBIT)
      self.RFRONTBIT = bool(self.RFRONTBIT)
      self.BTN_SOFT_KEY = bool(self.BTN_SOFT_KEY)
      self.BTN_SCROLL_UP = bool(self.BTN_SCROLL_UP)
      self.BTN_SCROLL_DOWN = bool(self.BTN_SCROLL_DOWN)
      self.BTN_START = bool(self.BTN_START)
      self.BTN_BACK = bool(self.BTN_BACK)
      self.ChargingActive = bool(self.ChargingActive)
      self.ChargingEnabled = bool(self.ChargingEnabled)
      self.ConfidentOnFuel = bool(self.ConfidentOnFuel)
      self.OnReservedFuel = bool(self.OnReservedFuel)
      self.EmptyFuel = bool(self.EmptyFuel)
      self.BatteryFailure = bool(self.BatteryFailure)
      self.ExtPwrPresent = bool(self.ExtPwrPresent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi = struct.Struct("<4h4b2hbhb13B2ihih2ihih2ih2ih2ih2ih2ihi4h2b7B2bi")
