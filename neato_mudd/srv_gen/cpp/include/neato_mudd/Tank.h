/* Auto-generated by genmsg_cpp for file /home/robotics/groovy_workspace/sandbox/neato_mudd/srv/Tank.srv */
#ifndef NEATO_MUDD_SERVICE_TANK_H
#define NEATO_MUDD_SERVICE_TANK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace neato_mudd
{
template <class ContainerAllocator>
struct TankRequest_ {
  typedef TankRequest_<ContainerAllocator> Type;

  TankRequest_()
  : left(0)
  , right(0)
  {
  }

  TankRequest_(const ContainerAllocator& _alloc)
  : left(0)
  , right(0)
  {
  }

  typedef int16_t _left_type;
  int16_t left;

  typedef int16_t _right_type;
  int16_t right;


  typedef boost::shared_ptr< ::neato_mudd::TankRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato_mudd::TankRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TankRequest
typedef  ::neato_mudd::TankRequest_<std::allocator<void> > TankRequest;

typedef boost::shared_ptr< ::neato_mudd::TankRequest> TankRequestPtr;
typedef boost::shared_ptr< ::neato_mudd::TankRequest const> TankRequestConstPtr;


template <class ContainerAllocator>
struct TankResponse_ {
  typedef TankResponse_<ContainerAllocator> Type;

  TankResponse_()
  : success(false)
  {
  }

  TankResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::neato_mudd::TankResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato_mudd::TankResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TankResponse
typedef  ::neato_mudd::TankResponse_<std::allocator<void> > TankResponse;

typedef boost::shared_ptr< ::neato_mudd::TankResponse> TankResponsePtr;
typedef boost::shared_ptr< ::neato_mudd::TankResponse const> TankResponseConstPtr;

struct Tank
{

typedef TankRequest Request;
typedef TankResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Tank
} // namespace neato_mudd

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neato_mudd::TankRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neato_mudd::TankRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neato_mudd::TankRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const  ::neato_mudd::TankRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09d1b2323a1aeae9ULL;
  static const uint64_t static_value2 = 0x343e81809a820b60ULL;
};

template<class ContainerAllocator>
struct DataType< ::neato_mudd::TankRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_mudd/TankRequest";
  }

  static const char* value(const  ::neato_mudd::TankRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neato_mudd::TankRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 left\n\
int16 right\n\
\n\
";
  }

  static const char* value(const  ::neato_mudd::TankRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neato_mudd::TankRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neato_mudd::TankResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neato_mudd::TankResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neato_mudd::TankResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::neato_mudd::TankResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::neato_mudd::TankResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_mudd/TankResponse";
  }

  static const char* value(const  ::neato_mudd::TankResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neato_mudd::TankResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::neato_mudd::TankResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neato_mudd::TankResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neato_mudd::TankRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TankRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neato_mudd::TankResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TankResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<neato_mudd::Tank> {
  static const char* value() 
  {
    return "03e1fb403d16dbbcaf79006d642b45b2";
  }

  static const char* value(const neato_mudd::Tank&) { return value(); } 
};

template<>
struct DataType<neato_mudd::Tank> {
  static const char* value() 
  {
    return "neato_mudd/Tank";
  }

  static const char* value(const neato_mudd::Tank&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neato_mudd::TankRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03e1fb403d16dbbcaf79006d642b45b2";
  }

  static const char* value(const neato_mudd::TankRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neato_mudd::TankRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_mudd/Tank";
  }

  static const char* value(const neato_mudd::TankRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neato_mudd::TankResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03e1fb403d16dbbcaf79006d642b45b2";
  }

  static const char* value(const neato_mudd::TankResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neato_mudd::TankResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_mudd/Tank";
  }

  static const char* value(const neato_mudd::TankResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NEATO_MUDD_SERVICE_TANK_H

