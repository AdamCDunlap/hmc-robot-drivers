/* Auto-generated by genmsg_cpp for file /home/robotics/ros_workspace/hmc-robot-drivers/ardrone2_mudd/srv/Control.srv */
#ifndef ARDRONE2_MUDD_SERVICE_CONTROL_H
#define ARDRONE2_MUDD_SERVICE_CONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ardrone2_mudd
{
template <class ContainerAllocator>
struct ControlRequest_ {
  typedef ControlRequest_<ContainerAllocator> Type;

  ControlRequest_()
  : flag(0)
  , roll(0.0)
  , pitch(0.0)
  , gaz(0.0)
  , yaw(0.0)
  {
  }

  ControlRequest_(const ContainerAllocator& _alloc)
  : flag(0)
  , roll(0.0)
  , pitch(0.0)
  , gaz(0.0)
  , yaw(0.0)
  {
  }

  typedef int8_t _flag_type;
  int8_t flag;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _gaz_type;
  float gaz;

  typedef float _yaw_type;
  float yaw;


private:
  static const char* __s_getDataType_() { return "ardrone2_mudd/ControlRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7f00cbb798eafc9179d36917a87240f3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "7f00cbb798eafc9179d36917a87240f3"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 flag\n\
float32 roll\n\
float32 pitch\n\
float32 gaz\n\
float32 yaw\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, flag);
    ros::serialization::serialize(stream, roll);
    ros::serialization::serialize(stream, pitch);
    ros::serialization::serialize(stream, gaz);
    ros::serialization::serialize(stream, yaw);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, flag);
    ros::serialization::deserialize(stream, roll);
    ros::serialization::deserialize(stream, pitch);
    ros::serialization::deserialize(stream, gaz);
    ros::serialization::deserialize(stream, yaw);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(flag);
    size += ros::serialization::serializationLength(roll);
    size += ros::serialization::serializationLength(pitch);
    size += ros::serialization::serializationLength(gaz);
    size += ros::serialization::serializationLength(yaw);
    return size;
  }

  typedef boost::shared_ptr< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone2_mudd::ControlRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlRequest
typedef  ::ardrone2_mudd::ControlRequest_<std::allocator<void> > ControlRequest;

typedef boost::shared_ptr< ::ardrone2_mudd::ControlRequest> ControlRequestPtr;
typedef boost::shared_ptr< ::ardrone2_mudd::ControlRequest const> ControlRequestConstPtr;


template <class ContainerAllocator>
struct ControlResponse_ {
  typedef ControlResponse_<ContainerAllocator> Type;

  ControlResponse_()
  {
  }

  ControlResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "ardrone2_mudd/ControlResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "7f00cbb798eafc9179d36917a87240f3"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone2_mudd::ControlResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlResponse
typedef  ::ardrone2_mudd::ControlResponse_<std::allocator<void> > ControlResponse;

typedef boost::shared_ptr< ::ardrone2_mudd::ControlResponse> ControlResponsePtr;
typedef boost::shared_ptr< ::ardrone2_mudd::ControlResponse const> ControlResponseConstPtr;

struct Control
{

typedef ControlRequest Request;
typedef ControlResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Control
} // namespace ardrone2_mudd

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone2_mudd::ControlRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f00cbb798eafc9179d36917a87240f3";
  }

  static const char* value(const  ::ardrone2_mudd::ControlRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7f00cbb798eafc91ULL;
  static const uint64_t static_value2 = 0x79d36917a87240f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone2_mudd/ControlRequest";
  }

  static const char* value(const  ::ardrone2_mudd::ControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 flag\n\
float32 roll\n\
float32 pitch\n\
float32 gaz\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::ardrone2_mudd::ControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone2_mudd::ControlResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ardrone2_mudd::ControlResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone2_mudd/ControlResponse";
  }

  static const char* value(const  ::ardrone2_mudd::ControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ardrone2_mudd::ControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone2_mudd::ControlRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.flag);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.gaz);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone2_mudd::ControlResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ardrone2_mudd::Control> {
  static const char* value() 
  {
    return "7f00cbb798eafc9179d36917a87240f3";
  }

  static const char* value(const ardrone2_mudd::Control&) { return value(); } 
};

template<>
struct DataType<ardrone2_mudd::Control> {
  static const char* value() 
  {
    return "ardrone2_mudd/Control";
  }

  static const char* value(const ardrone2_mudd::Control&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone2_mudd::ControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f00cbb798eafc9179d36917a87240f3";
  }

  static const char* value(const ardrone2_mudd::ControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone2_mudd::ControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone2_mudd/Control";
  }

  static const char* value(const ardrone2_mudd::ControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone2_mudd::ControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f00cbb798eafc9179d36917a87240f3";
  }

  static const char* value(const ardrone2_mudd::ControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone2_mudd::ControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone2_mudd/Control";
  }

  static const char* value(const ardrone2_mudd::ControlResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARDRONE2_MUDD_SERVICE_CONTROL_H

