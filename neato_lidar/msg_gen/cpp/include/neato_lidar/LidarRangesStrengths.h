/* Auto-generated by genmsg_cpp for file /home/luigi/ros_workspace/hmc-robot-drivers/neato_lidar/msg/LidarRangesStrengths.msg */
#ifndef NEATO_LIDAR_MESSAGE_LIDARRANGESSTRENGTHS_H
#define NEATO_LIDAR_MESSAGE_LIDARRANGESSTRENGTHS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace neato_lidar
{
template <class ContainerAllocator>
struct LidarRangesStrengths_ {
  typedef LidarRangesStrengths_<ContainerAllocator> Type;

  LidarRangesStrengths_()
  : header()
  , ranges()
  , strengths()
  {
    ranges.assign(0);
    strengths.assign(0);
  }

  LidarRangesStrengths_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ranges()
  , strengths()
  {
    ranges.assign(0);
    strengths.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<uint16_t, 360>  _ranges_type;
  boost::array<uint16_t, 360>  ranges;

  typedef boost::array<uint16_t, 360>  _strengths_type;
  boost::array<uint16_t, 360>  strengths;


  typedef boost::shared_ptr< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LidarRangesStrengths
typedef  ::neato_lidar::LidarRangesStrengths_<std::allocator<void> > LidarRangesStrengths;

typedef boost::shared_ptr< ::neato_lidar::LidarRangesStrengths> LidarRangesStrengthsPtr;
typedef boost::shared_ptr< ::neato_lidar::LidarRangesStrengths const> LidarRangesStrengthsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace neato_lidar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > {
  static const char* value() 
  {
    return "82e5c70e014b486ff6c31aa7c946a7cc";
  }

  static const char* value(const  ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x82e5c70e014b486fULL;
  static const uint64_t static_value2 = 0xf6c31aa7c946a7ccULL;
};

template<class ContainerAllocator>
struct DataType< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_lidar/LidarRangesStrengths";
  }

  static const char* value(const  ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint16[360] ranges\n\
uint16[360] strengths\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ranges);
    stream.next(m.strengths);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LidarRangesStrengths_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::neato_lidar::LidarRangesStrengths_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ranges[]" << std::endl;
    for (size_t i = 0; i < v.ranges.size(); ++i)
    {
      s << indent << "  ranges[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.ranges[i]);
    }
    s << indent << "strengths[]" << std::endl;
    for (size_t i = 0; i < v.strengths.size(); ++i)
    {
      s << indent << "  strengths[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.strengths[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // NEATO_LIDAR_MESSAGE_LIDARRANGESSTRENGTHS_H

